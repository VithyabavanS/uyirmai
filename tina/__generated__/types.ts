//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  home: Home;
  homeConnection: HomeConnection;
  philosophy: Philosophy;
  philosophyConnection: PhilosophyConnection;
  projects: Projects;
  projectsConnection: ProjectsConnection;
  resources: Resources;
  resourcesConnection: ResourcesConnection;
  get_involved: Get_Involved;
  get_involvedConnection: Get_InvolvedConnection;
  products: Products;
  productsConnection: ProductsConnection;
  blog: Blog;
  blogConnection: BlogConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
};


export type QueryPhilosophyArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPhilosophyConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PhilosophyFilter>;
};


export type QueryProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
};


export type QueryResourcesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryResourcesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResourcesFilter>;
};


export type QueryGet_InvolvedArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGet_InvolvedConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Get_InvolvedFilter>;
};


export type QueryProductsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProductsFilter>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};

export type DocumentFilter = {
  home?: InputMaybe<HomeFilter>;
  philosophy?: InputMaybe<PhilosophyFilter>;
  projects?: InputMaybe<ProjectsFilter>;
  resources?: InputMaybe<ResourcesFilter>;
  get_involved?: InputMaybe<Get_InvolvedFilter>;
  products?: InputMaybe<ProductsFilter>;
  blog?: InputMaybe<BlogFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Home | Philosophy | Projects | Resources | Get_Involved | Products | Blog | Folder;

export type HomeFeaturesSection = {
  __typename?: 'HomeFeaturesSection';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
};

export type HomeFeatures = {
  __typename?: 'HomeFeatures';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type HomeCta = {
  __typename?: 'HomeCta';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
};

export type Home = Node & Document & {
  __typename?: 'Home';
  heroTitle?: Maybe<Scalars['String']['output']>;
  heroSubtitle?: Maybe<Scalars['String']['output']>;
  heroButton?: Maybe<Scalars['String']['output']>;
  featuresSection?: Maybe<HomeFeaturesSection>;
  features?: Maybe<Array<Maybe<HomeFeatures>>>;
  cta?: Maybe<HomeCta>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HomeFeaturesSectionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type HomeFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type HomeCtaFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type HomeFilter = {
  heroTitle?: InputMaybe<StringFilter>;
  heroSubtitle?: InputMaybe<StringFilter>;
  heroButton?: InputMaybe<StringFilter>;
  featuresSection?: InputMaybe<HomeFeaturesSectionFilter>;
  features?: InputMaybe<HomeFeaturesFilter>;
  cta?: InputMaybe<HomeCtaFilter>;
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Home>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type PhilosophyMission = {
  __typename?: 'PhilosophyMission';
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type PhilosophyVision = {
  __typename?: 'PhilosophyVision';
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type PhilosophyPurpose = {
  __typename?: 'PhilosophyPurpose';
  title?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type PhilosophyCoreValues = {
  __typename?: 'PhilosophyCoreValues';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type Philosophy = Node & Document & {
  __typename?: 'Philosophy';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  mission?: Maybe<PhilosophyMission>;
  vision?: Maybe<PhilosophyVision>;
  purpose?: Maybe<PhilosophyPurpose>;
  coreValuesTitle?: Maybe<Scalars['String']['output']>;
  coreValues?: Maybe<Array<Maybe<PhilosophyCoreValues>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PhilosophyMissionFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type PhilosophyVisionFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type PhilosophyPurposeFilter = {
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type PhilosophyCoreValuesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PhilosophyFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  mission?: InputMaybe<PhilosophyMissionFilter>;
  vision?: InputMaybe<PhilosophyVisionFilter>;
  purpose?: InputMaybe<PhilosophyPurposeFilter>;
  coreValuesTitle?: InputMaybe<StringFilter>;
  coreValues?: InputMaybe<PhilosophyCoreValuesFilter>;
};

export type PhilosophyConnectionEdges = {
  __typename?: 'PhilosophyConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Philosophy>;
};

export type PhilosophyConnection = Connection & {
  __typename?: 'PhilosophyConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PhilosophyConnectionEdges>>>;
};

export type ProjectsProjects = {
  __typename?: 'ProjectsProjects';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  participants?: Maybe<Scalars['Float']['output']>;
  startDate?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
};

export type ProjectsUpcomingEvents = {
  __typename?: 'ProjectsUpcomingEvents';
  title?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['String']['output']>;
  time?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  spots?: Maybe<Scalars['Float']['output']>;
};

export type Projects = Node & Document & {
  __typename?: 'Projects';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  projectsTitle?: Maybe<Scalars['String']['output']>;
  projects?: Maybe<Array<Maybe<ProjectsProjects>>>;
  eventsTitle?: Maybe<Scalars['String']['output']>;
  upcomingEvents?: Maybe<Array<Maybe<ProjectsUpcomingEvents>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ProjectsProjectsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  participants?: InputMaybe<NumberFilter>;
  startDate?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
};

export type ProjectsUpcomingEventsFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<StringFilter>;
  time?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  spots?: InputMaybe<NumberFilter>;
};

export type ProjectsFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  projectsTitle?: InputMaybe<StringFilter>;
  projects?: InputMaybe<ProjectsProjectsFilter>;
  eventsTitle?: InputMaybe<StringFilter>;
  upcomingEvents?: InputMaybe<ProjectsUpcomingEventsFilter>;
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Projects>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type ResourcesResources = {
  __typename?: 'ResourcesResources';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  size?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  downloads?: Maybe<Scalars['Float']['output']>;
  views?: Maybe<Scalars['Float']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
};

export type ResourcesTechniques = {
  __typename?: 'ResourcesTechniques';
  title?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Resources = Node & Document & {
  __typename?: 'Resources';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  featuredResourcesTitle?: Maybe<Scalars['String']['output']>;
  allResourcesTitle?: Maybe<Scalars['String']['output']>;
  techniquesTitle?: Maybe<Scalars['String']['output']>;
  resources?: Maybe<Array<Maybe<ResourcesResources>>>;
  techniques?: Maybe<Array<Maybe<ResourcesTechniques>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResourcesResourcesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  size?: InputMaybe<StringFilter>;
  duration?: InputMaybe<StringFilter>;
  downloads?: InputMaybe<NumberFilter>;
  views?: InputMaybe<NumberFilter>;
  featured?: InputMaybe<BooleanFilter>;
};

export type ResourcesTechniquesFilter = {
  title?: InputMaybe<StringFilter>;
  items?: InputMaybe<StringFilter>;
};

export type ResourcesFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  featuredResourcesTitle?: InputMaybe<StringFilter>;
  allResourcesTitle?: InputMaybe<StringFilter>;
  techniquesTitle?: InputMaybe<StringFilter>;
  resources?: InputMaybe<ResourcesResourcesFilter>;
  techniques?: InputMaybe<ResourcesTechniquesFilter>;
};

export type ResourcesConnectionEdges = {
  __typename?: 'ResourcesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Resources>;
};

export type ResourcesConnection = Connection & {
  __typename?: 'ResourcesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ResourcesConnectionEdges>>>;
};

export type Get_InvolvedOpportunities = {
  __typename?: 'Get_involvedOpportunities';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  commitment?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  benefits?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Get_InvolvedCourses = {
  __typename?: 'Get_involvedCourses';
  title?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  format?: Maybe<Scalars['String']['output']>;
  level?: Maybe<Scalars['String']['output']>;
  nextSession?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['String']['output']>;
  highlights?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Get_InvolvedSteps = {
  __typename?: 'Get_involvedSteps';
  number?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type Get_Involved = Node & Document & {
  __typename?: 'Get_involved';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  volunteerOpportunitiesTitle?: Maybe<Scalars['String']['output']>;
  opportunities?: Maybe<Array<Maybe<Get_InvolvedOpportunities>>>;
  coursesTitle?: Maybe<Scalars['String']['output']>;
  courses?: Maybe<Array<Maybe<Get_InvolvedCourses>>>;
  howToGetStartedTitle?: Maybe<Scalars['String']['output']>;
  steps?: Maybe<Array<Maybe<Get_InvolvedSteps>>>;
  contactFormTitle?: Maybe<Scalars['String']['output']>;
  contactFormDescription?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Get_InvolvedOpportunitiesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  commitment?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  benefits?: InputMaybe<StringFilter>;
};

export type Get_InvolvedCoursesFilter = {
  title?: InputMaybe<StringFilter>;
  duration?: InputMaybe<StringFilter>;
  format?: InputMaybe<StringFilter>;
  level?: InputMaybe<StringFilter>;
  nextSession?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
  highlights?: InputMaybe<StringFilter>;
};

export type Get_InvolvedStepsFilter = {
  number?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type Get_InvolvedFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  volunteerOpportunitiesTitle?: InputMaybe<StringFilter>;
  opportunities?: InputMaybe<Get_InvolvedOpportunitiesFilter>;
  coursesTitle?: InputMaybe<StringFilter>;
  courses?: InputMaybe<Get_InvolvedCoursesFilter>;
  howToGetStartedTitle?: InputMaybe<StringFilter>;
  steps?: InputMaybe<Get_InvolvedStepsFilter>;
  contactFormTitle?: InputMaybe<StringFilter>;
  contactFormDescription?: InputMaybe<StringFilter>;
};

export type Get_InvolvedConnectionEdges = {
  __typename?: 'Get_involvedConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Get_Involved>;
};

export type Get_InvolvedConnection = Connection & {
  __typename?: 'Get_involvedConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Get_InvolvedConnectionEdges>>>;
};

export type ProductsProducts = {
  __typename?: 'ProductsProducts';
  name?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['Float']['output']>;
  originalPrice?: Maybe<Scalars['Float']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  rating?: Maybe<Scalars['Float']['output']>;
  reviews?: Maybe<Scalars['Float']['output']>;
  inStock?: Maybe<Scalars['Boolean']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  organic?: Maybe<Scalars['Boolean']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type ProductsServices = {
  __typename?: 'ProductsServices';
  title?: Maybe<Scalars['String']['output']>;
  price?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Products = Node & Document & {
  __typename?: 'Products';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  featuredProductsTitle?: Maybe<Scalars['String']['output']>;
  allProductsTitle?: Maybe<Scalars['String']['output']>;
  servicesTitle?: Maybe<Scalars['String']['output']>;
  products?: Maybe<Array<Maybe<ProductsProducts>>>;
  services?: Maybe<Array<Maybe<ProductsServices>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ProductsProductsFilter = {
  name?: InputMaybe<StringFilter>;
  price?: InputMaybe<NumberFilter>;
  originalPrice?: InputMaybe<NumberFilter>;
  image?: InputMaybe<ImageFilter>;
  category?: InputMaybe<StringFilter>;
  rating?: InputMaybe<NumberFilter>;
  reviews?: InputMaybe<NumberFilter>;
  inStock?: InputMaybe<BooleanFilter>;
  featured?: InputMaybe<BooleanFilter>;
  organic?: InputMaybe<BooleanFilter>;
  description?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
};

export type ProductsServicesFilter = {
  title?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  features?: InputMaybe<StringFilter>;
};

export type ProductsFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  featuredProductsTitle?: InputMaybe<StringFilter>;
  allProductsTitle?: InputMaybe<StringFilter>;
  servicesTitle?: InputMaybe<StringFilter>;
  products?: InputMaybe<ProductsProductsFilter>;
  services?: InputMaybe<ProductsServicesFilter>;
};

export type ProductsConnectionEdges = {
  __typename?: 'ProductsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Products>;
};

export type ProductsConnection = Connection & {
  __typename?: 'ProductsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProductsConnectionEdges>>>;
};

export type BlogBlogPosts = {
  __typename?: 'BlogBlogPosts';
  title?: Maybe<Scalars['String']['output']>;
  excerpt?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  readTime?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  blogPosts?: Maybe<Array<Maybe<BlogBlogPosts>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BlogBlogPostsFilter = {
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  date?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  readTime?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  featured?: InputMaybe<BooleanFilter>;
};

export type BlogFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  blogPosts?: InputMaybe<BlogBlogPostsFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHome: Home;
  createHome: Home;
  updatePhilosophy: Philosophy;
  createPhilosophy: Philosophy;
  updateProjects: Projects;
  createProjects: Projects;
  updateResources: Resources;
  createResources: Resources;
  updateGet_involved: Get_Involved;
  createGet_involved: Get_Involved;
  updateProducts: Products;
  createProducts: Products;
  updateBlog: Blog;
  createBlog: Blog;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationCreateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationUpdatePhilosophyArgs = {
  relativePath: Scalars['String']['input'];
  params: PhilosophyMutation;
};


export type MutationCreatePhilosophyArgs = {
  relativePath: Scalars['String']['input'];
  params: PhilosophyMutation;
};


export type MutationUpdateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationUpdateResourcesArgs = {
  relativePath: Scalars['String']['input'];
  params: ResourcesMutation;
};


export type MutationCreateResourcesArgs = {
  relativePath: Scalars['String']['input'];
  params: ResourcesMutation;
};


export type MutationUpdateGet_InvolvedArgs = {
  relativePath: Scalars['String']['input'];
  params: Get_InvolvedMutation;
};


export type MutationCreateGet_InvolvedArgs = {
  relativePath: Scalars['String']['input'];
  params: Get_InvolvedMutation;
};


export type MutationUpdateProductsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProductsMutation;
};


export type MutationCreateProductsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProductsMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};

export type DocumentUpdateMutation = {
  home?: InputMaybe<HomeMutation>;
  philosophy?: InputMaybe<PhilosophyMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  resources?: InputMaybe<ResourcesMutation>;
  get_involved?: InputMaybe<Get_InvolvedMutation>;
  products?: InputMaybe<ProductsMutation>;
  blog?: InputMaybe<BlogMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  home?: InputMaybe<HomeMutation>;
  philosophy?: InputMaybe<PhilosophyMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  resources?: InputMaybe<ResourcesMutation>;
  get_involved?: InputMaybe<Get_InvolvedMutation>;
  products?: InputMaybe<ProductsMutation>;
  blog?: InputMaybe<BlogMutation>;
};

export type HomeFeaturesSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
};

export type HomeFeaturesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type HomeCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
};

export type HomeMutation = {
  heroTitle?: InputMaybe<Scalars['String']['input']>;
  heroSubtitle?: InputMaybe<Scalars['String']['input']>;
  heroButton?: InputMaybe<Scalars['String']['input']>;
  featuresSection?: InputMaybe<HomeFeaturesSectionMutation>;
  features?: InputMaybe<Array<InputMaybe<HomeFeaturesMutation>>>;
  cta?: InputMaybe<HomeCtaMutation>;
};

export type PhilosophyMissionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type PhilosophyVisionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type PhilosophyPurposeMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type PhilosophyCoreValuesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PhilosophyMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  mission?: InputMaybe<PhilosophyMissionMutation>;
  vision?: InputMaybe<PhilosophyVisionMutation>;
  purpose?: InputMaybe<PhilosophyPurposeMutation>;
  coreValuesTitle?: InputMaybe<Scalars['String']['input']>;
  coreValues?: InputMaybe<Array<InputMaybe<PhilosophyCoreValuesMutation>>>;
};

export type ProjectsProjectsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  participants?: InputMaybe<Scalars['Float']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsUpcomingEventsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  time?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  spots?: InputMaybe<Scalars['Float']['input']>;
};

export type ProjectsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  projectsTitle?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<InputMaybe<ProjectsProjectsMutation>>>;
  eventsTitle?: InputMaybe<Scalars['String']['input']>;
  upcomingEvents?: InputMaybe<Array<InputMaybe<ProjectsUpcomingEventsMutation>>>;
};

export type ResourcesResourcesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  size?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  downloads?: InputMaybe<Scalars['Float']['input']>;
  views?: InputMaybe<Scalars['Float']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResourcesTechniquesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ResourcesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  featuredResourcesTitle?: InputMaybe<Scalars['String']['input']>;
  allResourcesTitle?: InputMaybe<Scalars['String']['input']>;
  techniquesTitle?: InputMaybe<Scalars['String']['input']>;
  resources?: InputMaybe<Array<InputMaybe<ResourcesResourcesMutation>>>;
  techniques?: InputMaybe<Array<InputMaybe<ResourcesTechniquesMutation>>>;
};

export type Get_InvolvedOpportunitiesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  commitment?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  benefits?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Get_InvolvedCoursesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  format?: InputMaybe<Scalars['String']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
  nextSession?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['String']['input']>;
  highlights?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type Get_InvolvedStepsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type Get_InvolvedMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  volunteerOpportunitiesTitle?: InputMaybe<Scalars['String']['input']>;
  opportunities?: InputMaybe<Array<InputMaybe<Get_InvolvedOpportunitiesMutation>>>;
  coursesTitle?: InputMaybe<Scalars['String']['input']>;
  courses?: InputMaybe<Array<InputMaybe<Get_InvolvedCoursesMutation>>>;
  howToGetStartedTitle?: InputMaybe<Scalars['String']['input']>;
  steps?: InputMaybe<Array<InputMaybe<Get_InvolvedStepsMutation>>>;
  contactFormTitle?: InputMaybe<Scalars['String']['input']>;
  contactFormDescription?: InputMaybe<Scalars['String']['input']>;
};

export type ProductsProductsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  originalPrice?: InputMaybe<Scalars['Float']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  rating?: InputMaybe<Scalars['Float']['input']>;
  reviews?: InputMaybe<Scalars['Float']['input']>;
  inStock?: InputMaybe<Scalars['Boolean']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  organic?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ProductsServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ProductsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  featuredProductsTitle?: InputMaybe<Scalars['String']['input']>;
  allProductsTitle?: InputMaybe<Scalars['String']['input']>;
  servicesTitle?: InputMaybe<Scalars['String']['input']>;
  products?: InputMaybe<Array<InputMaybe<ProductsProductsMutation>>>;
  services?: InputMaybe<Array<InputMaybe<ProductsServicesMutation>>>;
};

export type BlogBlogPostsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  readTime?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  blogPosts?: InputMaybe<Array<InputMaybe<BlogBlogPostsMutation>>>;
};

export type HomePartsFragment = { __typename: 'Home', heroTitle?: string | null, heroSubtitle?: string | null, heroButton?: string | null, featuresSection?: { __typename: 'HomeFeaturesSection', title?: string | null, subtitle?: string | null } | null, features?: Array<{ __typename: 'HomeFeatures', title?: string | null, description?: string | null } | null> | null, cta?: { __typename: 'HomeCta', title?: string | null, subtitle?: string | null } | null };

export type PhilosophyPartsFragment = { __typename: 'Philosophy', title?: string | null, subtitle?: string | null, coreValuesTitle?: string | null, mission?: { __typename: 'PhilosophyMission', title?: string | null, text?: string | null } | null, vision?: { __typename: 'PhilosophyVision', title?: string | null, text?: string | null } | null, purpose?: { __typename: 'PhilosophyPurpose', title?: string | null, text?: string | null } | null, coreValues?: Array<{ __typename: 'PhilosophyCoreValues', title?: string | null, description?: string | null } | null> | null };

export type ProjectsPartsFragment = { __typename: 'Projects', title?: string | null, subtitle?: string | null, projectsTitle?: string | null, eventsTitle?: string | null, projects?: Array<{ __typename: 'ProjectsProjects', title?: string | null, description?: string | null, status?: string | null, location?: string | null, participants?: number | null, startDate?: string | null, category?: string | null } | null> | null, upcomingEvents?: Array<{ __typename: 'ProjectsUpcomingEvents', title?: string | null, date?: string | null, time?: string | null, location?: string | null, type?: string | null, spots?: number | null } | null> | null };

export type ResourcesPartsFragment = { __typename: 'Resources', title?: string | null, subtitle?: string | null, featuredResourcesTitle?: string | null, allResourcesTitle?: string | null, techniquesTitle?: string | null, resources?: Array<{ __typename: 'ResourcesResources', title?: string | null, description?: string | null, type?: string | null, category?: string | null, size?: string | null, duration?: string | null, downloads?: number | null, views?: number | null, featured?: boolean | null } | null> | null, techniques?: Array<{ __typename: 'ResourcesTechniques', title?: string | null, items?: Array<string | null> | null } | null> | null };

export type Get_InvolvedPartsFragment = { __typename: 'Get_involved', title?: string | null, subtitle?: string | null, volunteerOpportunitiesTitle?: string | null, coursesTitle?: string | null, howToGetStartedTitle?: string | null, contactFormTitle?: string | null, contactFormDescription?: string | null, opportunities?: Array<{ __typename: 'Get_involvedOpportunities', title?: string | null, description?: string | null, commitment?: string | null, type?: string | null, benefits?: Array<string | null> | null } | null> | null, courses?: Array<{ __typename: 'Get_involvedCourses', title?: string | null, duration?: string | null, format?: string | null, level?: string | null, nextSession?: string | null, price?: string | null, highlights?: Array<string | null> | null } | null> | null, steps?: Array<{ __typename: 'Get_involvedSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null };

export type ProductsPartsFragment = { __typename: 'Products', title?: string | null, subtitle?: string | null, featuredProductsTitle?: string | null, allProductsTitle?: string | null, servicesTitle?: string | null, products?: Array<{ __typename: 'ProductsProducts', name?: string | null, price?: number | null, originalPrice?: number | null, image?: string | null, category?: string | null, rating?: number | null, reviews?: number | null, inStock?: boolean | null, featured?: boolean | null, organic?: boolean | null, description?: string | null, features?: Array<string | null> | null } | null> | null, services?: Array<{ __typename: 'ProductsServices', title?: string | null, price?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null };

export type BlogPartsFragment = { __typename: 'Blog', title?: string | null, subtitle?: string | null, blogPosts?: Array<{ __typename: 'BlogBlogPosts', title?: string | null, excerpt?: string | null, author?: string | null, date?: string | null, category?: string | null, readTime?: string | null, image?: string | null, featured?: boolean | null } | null> | null };

export type HomeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomeQuery = { __typename?: 'Query', home: { __typename: 'Home', id: string, heroTitle?: string | null, heroSubtitle?: string | null, heroButton?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, featuresSection?: { __typename: 'HomeFeaturesSection', title?: string | null, subtitle?: string | null } | null, features?: Array<{ __typename: 'HomeFeatures', title?: string | null, description?: string | null } | null> | null, cta?: { __typename: 'HomeCta', title?: string | null, subtitle?: string | null } | null } };

export type HomeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
}>;


export type HomeConnectionQuery = { __typename?: 'Query', homeConnection: { __typename?: 'HomeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomeConnectionEdges', cursor: string, node?: { __typename: 'Home', id: string, heroTitle?: string | null, heroSubtitle?: string | null, heroButton?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, featuresSection?: { __typename: 'HomeFeaturesSection', title?: string | null, subtitle?: string | null } | null, features?: Array<{ __typename: 'HomeFeatures', title?: string | null, description?: string | null } | null> | null, cta?: { __typename: 'HomeCta', title?: string | null, subtitle?: string | null } | null } | null } | null> | null } };

export type PhilosophyQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PhilosophyQuery = { __typename?: 'Query', philosophy: { __typename: 'Philosophy', id: string, title?: string | null, subtitle?: string | null, coreValuesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mission?: { __typename: 'PhilosophyMission', title?: string | null, text?: string | null } | null, vision?: { __typename: 'PhilosophyVision', title?: string | null, text?: string | null } | null, purpose?: { __typename: 'PhilosophyPurpose', title?: string | null, text?: string | null } | null, coreValues?: Array<{ __typename: 'PhilosophyCoreValues', title?: string | null, description?: string | null } | null> | null } };

export type PhilosophyConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PhilosophyFilter>;
}>;


export type PhilosophyConnectionQuery = { __typename?: 'Query', philosophyConnection: { __typename?: 'PhilosophyConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PhilosophyConnectionEdges', cursor: string, node?: { __typename: 'Philosophy', id: string, title?: string | null, subtitle?: string | null, coreValuesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mission?: { __typename: 'PhilosophyMission', title?: string | null, text?: string | null } | null, vision?: { __typename: 'PhilosophyVision', title?: string | null, text?: string | null } | null, purpose?: { __typename: 'PhilosophyPurpose', title?: string | null, text?: string | null } | null, coreValues?: Array<{ __typename: 'PhilosophyCoreValues', title?: string | null, description?: string | null } | null> | null } | null } | null> | null } };

export type ProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProjectsQuery = { __typename?: 'Query', projects: { __typename: 'Projects', id: string, title?: string | null, subtitle?: string | null, projectsTitle?: string | null, eventsTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: Array<{ __typename: 'ProjectsProjects', title?: string | null, description?: string | null, status?: string | null, location?: string | null, participants?: number | null, startDate?: string | null, category?: string | null } | null> | null, upcomingEvents?: Array<{ __typename: 'ProjectsUpcomingEvents', title?: string | null, date?: string | null, time?: string | null, location?: string | null, type?: string | null, spots?: number | null } | null> | null } };

export type ProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
}>;


export type ProjectsConnectionQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', cursor: string, node?: { __typename: 'Projects', id: string, title?: string | null, subtitle?: string | null, projectsTitle?: string | null, eventsTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: Array<{ __typename: 'ProjectsProjects', title?: string | null, description?: string | null, status?: string | null, location?: string | null, participants?: number | null, startDate?: string | null, category?: string | null } | null> | null, upcomingEvents?: Array<{ __typename: 'ProjectsUpcomingEvents', title?: string | null, date?: string | null, time?: string | null, location?: string | null, type?: string | null, spots?: number | null } | null> | null } | null } | null> | null } };

export type ResourcesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ResourcesQuery = { __typename?: 'Query', resources: { __typename: 'Resources', id: string, title?: string | null, subtitle?: string | null, featuredResourcesTitle?: string | null, allResourcesTitle?: string | null, techniquesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, resources?: Array<{ __typename: 'ResourcesResources', title?: string | null, description?: string | null, type?: string | null, category?: string | null, size?: string | null, duration?: string | null, downloads?: number | null, views?: number | null, featured?: boolean | null } | null> | null, techniques?: Array<{ __typename: 'ResourcesTechniques', title?: string | null, items?: Array<string | null> | null } | null> | null } };

export type ResourcesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResourcesFilter>;
}>;


export type ResourcesConnectionQuery = { __typename?: 'Query', resourcesConnection: { __typename?: 'ResourcesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ResourcesConnectionEdges', cursor: string, node?: { __typename: 'Resources', id: string, title?: string | null, subtitle?: string | null, featuredResourcesTitle?: string | null, allResourcesTitle?: string | null, techniquesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, resources?: Array<{ __typename: 'ResourcesResources', title?: string | null, description?: string | null, type?: string | null, category?: string | null, size?: string | null, duration?: string | null, downloads?: number | null, views?: number | null, featured?: boolean | null } | null> | null, techniques?: Array<{ __typename: 'ResourcesTechniques', title?: string | null, items?: Array<string | null> | null } | null> | null } | null } | null> | null } };

export type Get_InvolvedQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Get_InvolvedQuery = { __typename?: 'Query', get_involved: { __typename: 'Get_involved', id: string, title?: string | null, subtitle?: string | null, volunteerOpportunitiesTitle?: string | null, coursesTitle?: string | null, howToGetStartedTitle?: string | null, contactFormTitle?: string | null, contactFormDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, opportunities?: Array<{ __typename: 'Get_involvedOpportunities', title?: string | null, description?: string | null, commitment?: string | null, type?: string | null, benefits?: Array<string | null> | null } | null> | null, courses?: Array<{ __typename: 'Get_involvedCourses', title?: string | null, duration?: string | null, format?: string | null, level?: string | null, nextSession?: string | null, price?: string | null, highlights?: Array<string | null> | null } | null> | null, steps?: Array<{ __typename: 'Get_involvedSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null } };

export type Get_InvolvedConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Get_InvolvedFilter>;
}>;


export type Get_InvolvedConnectionQuery = { __typename?: 'Query', get_involvedConnection: { __typename?: 'Get_involvedConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Get_involvedConnectionEdges', cursor: string, node?: { __typename: 'Get_involved', id: string, title?: string | null, subtitle?: string | null, volunteerOpportunitiesTitle?: string | null, coursesTitle?: string | null, howToGetStartedTitle?: string | null, contactFormTitle?: string | null, contactFormDescription?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, opportunities?: Array<{ __typename: 'Get_involvedOpportunities', title?: string | null, description?: string | null, commitment?: string | null, type?: string | null, benefits?: Array<string | null> | null } | null> | null, courses?: Array<{ __typename: 'Get_involvedCourses', title?: string | null, duration?: string | null, format?: string | null, level?: string | null, nextSession?: string | null, price?: string | null, highlights?: Array<string | null> | null } | null> | null, steps?: Array<{ __typename: 'Get_involvedSteps', number?: string | null, title?: string | null, description?: string | null } | null> | null } | null } | null> | null } };

export type ProductsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProductsQuery = { __typename?: 'Query', products: { __typename: 'Products', id: string, title?: string | null, subtitle?: string | null, featuredProductsTitle?: string | null, allProductsTitle?: string | null, servicesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, products?: Array<{ __typename: 'ProductsProducts', name?: string | null, price?: number | null, originalPrice?: number | null, image?: string | null, category?: string | null, rating?: number | null, reviews?: number | null, inStock?: boolean | null, featured?: boolean | null, organic?: boolean | null, description?: string | null, features?: Array<string | null> | null } | null> | null, services?: Array<{ __typename: 'ProductsServices', title?: string | null, price?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null } };

export type ProductsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProductsFilter>;
}>;


export type ProductsConnectionQuery = { __typename?: 'Query', productsConnection: { __typename?: 'ProductsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProductsConnectionEdges', cursor: string, node?: { __typename: 'Products', id: string, title?: string | null, subtitle?: string | null, featuredProductsTitle?: string | null, allProductsTitle?: string | null, servicesTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, products?: Array<{ __typename: 'ProductsProducts', name?: string | null, price?: number | null, originalPrice?: number | null, image?: string | null, category?: string | null, rating?: number | null, reviews?: number | null, inStock?: boolean | null, featured?: boolean | null, organic?: boolean | null, description?: string | null, features?: Array<string | null> | null } | null> | null, services?: Array<{ __typename: 'ProductsServices', title?: string | null, price?: string | null, description?: string | null, features?: Array<string | null> | null } | null> | null } | null } | null> | null } };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, title?: string | null, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blogPosts?: Array<{ __typename: 'BlogBlogPosts', title?: string | null, excerpt?: string | null, author?: string | null, date?: string | null, category?: string | null, readTime?: string | null, image?: string | null, featured?: boolean | null } | null> | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, title?: string | null, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, blogPosts?: Array<{ __typename: 'BlogBlogPosts', title?: string | null, excerpt?: string | null, author?: string | null, date?: string | null, category?: string | null, readTime?: string | null, image?: string | null, featured?: boolean | null } | null> | null } | null } | null> | null } };

export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  __typename
  heroTitle
  heroSubtitle
  heroButton
  featuresSection {
    __typename
    title
    subtitle
  }
  features {
    __typename
    title
    description
  }
  cta {
    __typename
    title
    subtitle
  }
}
    `;
export const PhilosophyPartsFragmentDoc = gql`
    fragment PhilosophyParts on Philosophy {
  __typename
  title
  subtitle
  mission {
    __typename
    title
    text
  }
  vision {
    __typename
    title
    text
  }
  purpose {
    __typename
    title
    text
  }
  coreValuesTitle
  coreValues {
    __typename
    title
    description
  }
}
    `;
export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  __typename
  title
  subtitle
  projectsTitle
  projects {
    __typename
    title
    description
    status
    location
    participants
    startDate
    category
  }
  eventsTitle
  upcomingEvents {
    __typename
    title
    date
    time
    location
    type
    spots
  }
}
    `;
export const ResourcesPartsFragmentDoc = gql`
    fragment ResourcesParts on Resources {
  __typename
  title
  subtitle
  featuredResourcesTitle
  allResourcesTitle
  techniquesTitle
  resources {
    __typename
    title
    description
    type
    category
    size
    duration
    downloads
    views
    featured
  }
  techniques {
    __typename
    title
    items
  }
}
    `;
export const Get_InvolvedPartsFragmentDoc = gql`
    fragment Get_involvedParts on Get_involved {
  __typename
  title
  subtitle
  volunteerOpportunitiesTitle
  opportunities {
    __typename
    title
    description
    commitment
    type
    benefits
  }
  coursesTitle
  courses {
    __typename
    title
    duration
    format
    level
    nextSession
    price
    highlights
  }
  howToGetStartedTitle
  steps {
    __typename
    number
    title
    description
  }
  contactFormTitle
  contactFormDescription
}
    `;
export const ProductsPartsFragmentDoc = gql`
    fragment ProductsParts on Products {
  __typename
  title
  subtitle
  featuredProductsTitle
  allProductsTitle
  servicesTitle
  products {
    __typename
    name
    price
    originalPrice
    image
    category
    rating
    reviews
    inStock
    featured
    organic
    description
    features
  }
  services {
    __typename
    title
    price
    description
    features
  }
}
    `;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  title
  subtitle
  blogPosts {
    __typename
    title
    excerpt
    author
    date
    category
    readTime
    image
    featured
  }
}
    `;
export const HomeDocument = gql`
    query home($relativePath: String!) {
  home(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomeParts
  }
}
    ${HomePartsFragmentDoc}`;
export const HomeConnectionDocument = gql`
    query homeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomeFilter) {
  homeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomeParts
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const PhilosophyDocument = gql`
    query philosophy($relativePath: String!) {
  philosophy(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PhilosophyParts
  }
}
    ${PhilosophyPartsFragmentDoc}`;
export const PhilosophyConnectionDocument = gql`
    query philosophyConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PhilosophyFilter) {
  philosophyConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PhilosophyParts
      }
    }
  }
}
    ${PhilosophyPartsFragmentDoc}`;
export const ProjectsDocument = gql`
    query projects($relativePath: String!) {
  projects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjectsParts
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ProjectsConnectionDocument = gql`
    query projectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjectsFilter) {
  projectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjectsParts
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ResourcesDocument = gql`
    query resources($relativePath: String!) {
  resources(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ResourcesParts
  }
}
    ${ResourcesPartsFragmentDoc}`;
export const ResourcesConnectionDocument = gql`
    query resourcesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ResourcesFilter) {
  resourcesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ResourcesParts
      }
    }
  }
}
    ${ResourcesPartsFragmentDoc}`;
export const Get_InvolvedDocument = gql`
    query get_involved($relativePath: String!) {
  get_involved(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Get_involvedParts
  }
}
    ${Get_InvolvedPartsFragmentDoc}`;
export const Get_InvolvedConnectionDocument = gql`
    query get_involvedConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Get_involvedFilter) {
  get_involvedConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Get_involvedParts
      }
    }
  }
}
    ${Get_InvolvedPartsFragmentDoc}`;
export const ProductsDocument = gql`
    query products($relativePath: String!) {
  products(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProductsParts
  }
}
    ${ProductsPartsFragmentDoc}`;
export const ProductsConnectionDocument = gql`
    query productsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProductsFilter) {
  productsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProductsParts
      }
    }
  }
}
    ${ProductsPartsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      home(variables: HomeQueryVariables, options?: C): Promise<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}> {
        return requester<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}, HomeQueryVariables>(HomeDocument, variables, options);
      },
    homeConnection(variables?: HomeConnectionQueryVariables, options?: C): Promise<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}> {
        return requester<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}, HomeConnectionQueryVariables>(HomeConnectionDocument, variables, options);
      },
    philosophy(variables: PhilosophyQueryVariables, options?: C): Promise<{data: PhilosophyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PhilosophyQueryVariables, query: string}> {
        return requester<{data: PhilosophyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PhilosophyQueryVariables, query: string}, PhilosophyQueryVariables>(PhilosophyDocument, variables, options);
      },
    philosophyConnection(variables?: PhilosophyConnectionQueryVariables, options?: C): Promise<{data: PhilosophyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PhilosophyConnectionQueryVariables, query: string}> {
        return requester<{data: PhilosophyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PhilosophyConnectionQueryVariables, query: string}, PhilosophyConnectionQueryVariables>(PhilosophyConnectionDocument, variables, options);
      },
    projects(variables: ProjectsQueryVariables, options?: C): Promise<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}> {
        return requester<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}, ProjectsQueryVariables>(ProjectsDocument, variables, options);
      },
    projectsConnection(variables?: ProjectsConnectionQueryVariables, options?: C): Promise<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}, ProjectsConnectionQueryVariables>(ProjectsConnectionDocument, variables, options);
      },
    resources(variables: ResourcesQueryVariables, options?: C): Promise<{data: ResourcesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResourcesQueryVariables, query: string}> {
        return requester<{data: ResourcesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResourcesQueryVariables, query: string}, ResourcesQueryVariables>(ResourcesDocument, variables, options);
      },
    resourcesConnection(variables?: ResourcesConnectionQueryVariables, options?: C): Promise<{data: ResourcesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResourcesConnectionQueryVariables, query: string}> {
        return requester<{data: ResourcesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResourcesConnectionQueryVariables, query: string}, ResourcesConnectionQueryVariables>(ResourcesConnectionDocument, variables, options);
      },
    get_involved(variables: Get_InvolvedQueryVariables, options?: C): Promise<{data: Get_InvolvedQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Get_InvolvedQueryVariables, query: string}> {
        return requester<{data: Get_InvolvedQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Get_InvolvedQueryVariables, query: string}, Get_InvolvedQueryVariables>(Get_InvolvedDocument, variables, options);
      },
    get_involvedConnection(variables?: Get_InvolvedConnectionQueryVariables, options?: C): Promise<{data: Get_InvolvedConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Get_InvolvedConnectionQueryVariables, query: string}> {
        return requester<{data: Get_InvolvedConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Get_InvolvedConnectionQueryVariables, query: string}, Get_InvolvedConnectionQueryVariables>(Get_InvolvedConnectionDocument, variables, options);
      },
    products(variables: ProductsQueryVariables, options?: C): Promise<{data: ProductsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductsQueryVariables, query: string}> {
        return requester<{data: ProductsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductsQueryVariables, query: string}, ProductsQueryVariables>(ProductsDocument, variables, options);
      },
    productsConnection(variables?: ProductsConnectionQueryVariables, options?: C): Promise<{data: ProductsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductsConnectionQueryVariables, query: string}> {
        return requester<{data: ProductsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductsConnectionQueryVariables, query: string}, ProductsConnectionQueryVariables>(ProductsConnectionDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  