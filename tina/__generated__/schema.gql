# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomeFilter): HomeConnection!
  philosophy(relativePath: String): Philosophy!
  philosophyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PhilosophyFilter): PhilosophyConnection!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
  resources(relativePath: String): Resources!
  resourcesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ResourcesFilter): ResourcesConnection!
  get_involved(relativePath: String): Get_involved!
  get_involvedConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Get_involvedFilter): Get_involvedConnection!
  products(relativePath: String): Products!
  productsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProductsFilter): ProductsConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
}

input DocumentFilter {
  home: HomeFilter
  philosophy: PhilosophyFilter
  projects: ProjectsFilter
  resources: ResourcesFilter
  get_involved: Get_involvedFilter
  products: ProductsFilter
  blog: BlogFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Home | Philosophy | Projects | Resources | Get_involved | Products | Blog | Folder

type HomeFeaturesSection {
  title: String
  subtitle: String
}

type HomeFeatures {
  title: String
  description: String
}

type HomeCta {
  title: String
  subtitle: String
}

type Home implements Node & Document {
  heroTitle: String
  heroSubtitle: String
  heroButton: String
  featuresSection: HomeFeaturesSection
  features: [HomeFeatures]
  cta: HomeCta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomeFeaturesSectionFilter {
  title: StringFilter
  subtitle: StringFilter
}

input HomeFeaturesFilter {
  title: StringFilter
  description: StringFilter
}

input HomeCtaFilter {
  title: StringFilter
  subtitle: StringFilter
}

input HomeFilter {
  heroTitle: StringFilter
  heroSubtitle: StringFilter
  heroButton: StringFilter
  featuresSection: HomeFeaturesSectionFilter
  features: HomeFeaturesFilter
  cta: HomeCtaFilter
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type PhilosophyMission {
  title: String
  text: String
}

type PhilosophyVision {
  title: String
  text: String
}

type PhilosophyPurpose {
  title: String
  text: String
}

type PhilosophyCoreValues {
  title: String
  description: String
}

type Philosophy implements Node & Document {
  title: String
  subtitle: String
  mission: PhilosophyMission
  vision: PhilosophyVision
  purpose: PhilosophyPurpose
  coreValuesTitle: String
  coreValues: [PhilosophyCoreValues]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PhilosophyMissionFilter {
  title: StringFilter
  text: StringFilter
}

input PhilosophyVisionFilter {
  title: StringFilter
  text: StringFilter
}

input PhilosophyPurposeFilter {
  title: StringFilter
  text: StringFilter
}

input PhilosophyCoreValuesFilter {
  title: StringFilter
  description: StringFilter
}

input PhilosophyFilter {
  title: StringFilter
  subtitle: StringFilter
  mission: PhilosophyMissionFilter
  vision: PhilosophyVisionFilter
  purpose: PhilosophyPurposeFilter
  coreValuesTitle: StringFilter
  coreValues: PhilosophyCoreValuesFilter
}

type PhilosophyConnectionEdges {
  cursor: String!
  node: Philosophy
}

type PhilosophyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PhilosophyConnectionEdges]
}

type ProjectsProjects {
  title: String
  description: String
  status: String
  location: String
  participants: Float
  startDate: String
  category: String
}

type ProjectsUpcomingEvents {
  title: String
  date: String
  time: String
  location: String
  type: String
  spots: Float
}

type Projects implements Node & Document {
  title: String
  subtitle: String
  projectsTitle: String
  projects: [ProjectsProjects]
  eventsTitle: String
  upcomingEvents: [ProjectsUpcomingEvents]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ProjectsProjectsFilter {
  title: StringFilter
  description: StringFilter
  status: StringFilter
  location: StringFilter
  participants: NumberFilter
  startDate: StringFilter
  category: StringFilter
}

input ProjectsUpcomingEventsFilter {
  title: StringFilter
  date: StringFilter
  time: StringFilter
  location: StringFilter
  type: StringFilter
  spots: NumberFilter
}

input ProjectsFilter {
  title: StringFilter
  subtitle: StringFilter
  projectsTitle: StringFilter
  projects: ProjectsProjectsFilter
  eventsTitle: StringFilter
  upcomingEvents: ProjectsUpcomingEventsFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type ResourcesResources {
  title: String
  description: String
  type: String
  category: String
  size: String
  duration: String
  downloads: Float
  views: Float
  featured: Boolean
}

type ResourcesTechniques {
  title: String
  items: [String]
}

type Resources implements Node & Document {
  title: String
  subtitle: String
  featuredResourcesTitle: String
  allResourcesTitle: String
  techniquesTitle: String
  resources: [ResourcesResources]
  techniques: [ResourcesTechniques]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ResourcesResourcesFilter {
  title: StringFilter
  description: StringFilter
  type: StringFilter
  category: StringFilter
  size: StringFilter
  duration: StringFilter
  downloads: NumberFilter
  views: NumberFilter
  featured: BooleanFilter
}

input ResourcesTechniquesFilter {
  title: StringFilter
  items: StringFilter
}

input ResourcesFilter {
  title: StringFilter
  subtitle: StringFilter
  featuredResourcesTitle: StringFilter
  allResourcesTitle: StringFilter
  techniquesTitle: StringFilter
  resources: ResourcesResourcesFilter
  techniques: ResourcesTechniquesFilter
}

type ResourcesConnectionEdges {
  cursor: String!
  node: Resources
}

type ResourcesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ResourcesConnectionEdges]
}

type Get_involvedOpportunities {
  title: String
  description: String
  commitment: String
  type: String
  benefits: [String]
}

type Get_involvedCourses {
  title: String
  duration: String
  format: String
  level: String
  nextSession: String
  price: String
  highlights: [String]
}

type Get_involvedSteps {
  number: String
  title: String
  description: String
}

type Get_involved implements Node & Document {
  title: String
  subtitle: String
  volunteerOpportunitiesTitle: String
  opportunities: [Get_involvedOpportunities]
  coursesTitle: String
  courses: [Get_involvedCourses]
  howToGetStartedTitle: String
  steps: [Get_involvedSteps]
  contactFormTitle: String
  contactFormDescription: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Get_involvedOpportunitiesFilter {
  title: StringFilter
  description: StringFilter
  commitment: StringFilter
  type: StringFilter
  benefits: StringFilter
}

input Get_involvedCoursesFilter {
  title: StringFilter
  duration: StringFilter
  format: StringFilter
  level: StringFilter
  nextSession: StringFilter
  price: StringFilter
  highlights: StringFilter
}

input Get_involvedStepsFilter {
  number: StringFilter
  title: StringFilter
  description: StringFilter
}

input Get_involvedFilter {
  title: StringFilter
  subtitle: StringFilter
  volunteerOpportunitiesTitle: StringFilter
  opportunities: Get_involvedOpportunitiesFilter
  coursesTitle: StringFilter
  courses: Get_involvedCoursesFilter
  howToGetStartedTitle: StringFilter
  steps: Get_involvedStepsFilter
  contactFormTitle: StringFilter
  contactFormDescription: StringFilter
}

type Get_involvedConnectionEdges {
  cursor: String!
  node: Get_involved
}

type Get_involvedConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Get_involvedConnectionEdges]
}

type ProductsProducts {
  name: String
  price: Float
  originalPrice: Float
  image: String
  category: String
  rating: Float
  reviews: Float
  inStock: Boolean
  featured: Boolean
  organic: Boolean
  description: String
  features: [String]
}

type ProductsServices {
  title: String
  price: String
  description: String
  features: [String]
}

type Products implements Node & Document {
  title: String
  subtitle: String
  featuredProductsTitle: String
  allProductsTitle: String
  servicesTitle: String
  products: [ProductsProducts]
  services: [ProductsServices]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProductsProductsFilter {
  name: StringFilter
  price: NumberFilter
  originalPrice: NumberFilter
  image: ImageFilter
  category: StringFilter
  rating: NumberFilter
  reviews: NumberFilter
  inStock: BooleanFilter
  featured: BooleanFilter
  organic: BooleanFilter
  description: StringFilter
  features: StringFilter
}

input ProductsServicesFilter {
  title: StringFilter
  price: StringFilter
  description: StringFilter
  features: StringFilter
}

input ProductsFilter {
  title: StringFilter
  subtitle: StringFilter
  featuredProductsTitle: StringFilter
  allProductsTitle: StringFilter
  servicesTitle: StringFilter
  products: ProductsProductsFilter
  services: ProductsServicesFilter
}

type ProductsConnectionEdges {
  cursor: String!
  node: Products
}

type ProductsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProductsConnectionEdges]
}

type BlogBlogPosts {
  title: String
  excerpt: String
  author: String
  date: String
  category: String
  readTime: String
  image: String
  featured: Boolean
}

type Blog implements Node & Document {
  title: String
  subtitle: String
  blogPosts: [BlogBlogPosts]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BlogBlogPostsFilter {
  title: StringFilter
  excerpt: StringFilter
  author: StringFilter
  date: StringFilter
  category: StringFilter
  readTime: StringFilter
  image: ImageFilter
  featured: BooleanFilter
}

input BlogFilter {
  title: StringFilter
  subtitle: StringFilter
  blogPosts: BlogBlogPostsFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updatePhilosophy(relativePath: String!, params: PhilosophyMutation!): Philosophy!
  createPhilosophy(relativePath: String!, params: PhilosophyMutation!): Philosophy!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  updateResources(relativePath: String!, params: ResourcesMutation!): Resources!
  createResources(relativePath: String!, params: ResourcesMutation!): Resources!
  updateGet_involved(relativePath: String!, params: Get_involvedMutation!): Get_involved!
  createGet_involved(relativePath: String!, params: Get_involvedMutation!): Get_involved!
  updateProducts(relativePath: String!, params: ProductsMutation!): Products!
  createProducts(relativePath: String!, params: ProductsMutation!): Products!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
}

input DocumentUpdateMutation {
  home: HomeMutation
  philosophy: PhilosophyMutation
  projects: ProjectsMutation
  resources: ResourcesMutation
  get_involved: Get_involvedMutation
  products: ProductsMutation
  blog: BlogMutation
  relativePath: String
}

input DocumentMutation {
  home: HomeMutation
  philosophy: PhilosophyMutation
  projects: ProjectsMutation
  resources: ResourcesMutation
  get_involved: Get_involvedMutation
  products: ProductsMutation
  blog: BlogMutation
}

input HomeFeaturesSectionMutation {
  title: String
  subtitle: String
}

input HomeFeaturesMutation {
  title: String
  description: String
}

input HomeCtaMutation {
  title: String
  subtitle: String
}

input HomeMutation {
  heroTitle: String
  heroSubtitle: String
  heroButton: String
  featuresSection: HomeFeaturesSectionMutation
  features: [HomeFeaturesMutation]
  cta: HomeCtaMutation
}

input PhilosophyMissionMutation {
  title: String
  text: String
}

input PhilosophyVisionMutation {
  title: String
  text: String
}

input PhilosophyPurposeMutation {
  title: String
  text: String
}

input PhilosophyCoreValuesMutation {
  title: String
  description: String
}

input PhilosophyMutation {
  title: String
  subtitle: String
  mission: PhilosophyMissionMutation
  vision: PhilosophyVisionMutation
  purpose: PhilosophyPurposeMutation
  coreValuesTitle: String
  coreValues: [PhilosophyCoreValuesMutation]
}

input ProjectsProjectsMutation {
  title: String
  description: String
  status: String
  location: String
  participants: Float
  startDate: String
  category: String
}

input ProjectsUpcomingEventsMutation {
  title: String
  date: String
  time: String
  location: String
  type: String
  spots: Float
}

input ProjectsMutation {
  title: String
  subtitle: String
  projectsTitle: String
  projects: [ProjectsProjectsMutation]
  eventsTitle: String
  upcomingEvents: [ProjectsUpcomingEventsMutation]
}

input ResourcesResourcesMutation {
  title: String
  description: String
  type: String
  category: String
  size: String
  duration: String
  downloads: Float
  views: Float
  featured: Boolean
}

input ResourcesTechniquesMutation {
  title: String
  items: [String]
}

input ResourcesMutation {
  title: String
  subtitle: String
  featuredResourcesTitle: String
  allResourcesTitle: String
  techniquesTitle: String
  resources: [ResourcesResourcesMutation]
  techniques: [ResourcesTechniquesMutation]
}

input Get_involvedOpportunitiesMutation {
  title: String
  description: String
  commitment: String
  type: String
  benefits: [String]
}

input Get_involvedCoursesMutation {
  title: String
  duration: String
  format: String
  level: String
  nextSession: String
  price: String
  highlights: [String]
}

input Get_involvedStepsMutation {
  number: String
  title: String
  description: String
}

input Get_involvedMutation {
  title: String
  subtitle: String
  volunteerOpportunitiesTitle: String
  opportunities: [Get_involvedOpportunitiesMutation]
  coursesTitle: String
  courses: [Get_involvedCoursesMutation]
  howToGetStartedTitle: String
  steps: [Get_involvedStepsMutation]
  contactFormTitle: String
  contactFormDescription: String
}

input ProductsProductsMutation {
  name: String
  price: Float
  originalPrice: Float
  image: String
  category: String
  rating: Float
  reviews: Float
  inStock: Boolean
  featured: Boolean
  organic: Boolean
  description: String
  features: [String]
}

input ProductsServicesMutation {
  title: String
  price: String
  description: String
  features: [String]
}

input ProductsMutation {
  title: String
  subtitle: String
  featuredProductsTitle: String
  allProductsTitle: String
  servicesTitle: String
  products: [ProductsProductsMutation]
  services: [ProductsServicesMutation]
}

input BlogBlogPostsMutation {
  title: String
  excerpt: String
  author: String
  date: String
  category: String
  readTime: String
  image: String
  featured: Boolean
}

input BlogMutation {
  title: String
  subtitle: String
  blogPosts: [BlogBlogPostsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
